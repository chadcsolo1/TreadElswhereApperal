@using System.Text.Json
@inject ProtectedLocalStorage _protectedLocalStorage
@inject ICartService _cartService
@implements IDisposable



<a href="cart" class="btn btn-info">
    <i class="bi bi-cart"></i>
    Cart
    <span class="badge rounded-pill bg-dark">

        @cartCount


    </span>
</a>




@code {
    private int? cartCount = 0;
    private bool isConnected;

    protected override void OnInitialized()
    {
        _cartService.OnChange += StateHasChanged;
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = false;
            await LoadStateAsync();
            StateHasChanged();
        } else
        {
            await LoadStateAsync();
            StateHasChanged();
        }
        //_cartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _cartService.OnChange -= StateHasChanged;
    }

    private async Task LoadStateAsync()
    {
        try
        {
            var result = await _protectedLocalStorage.GetAsync<List<Product>>("cart1");

            var count = result.Success ? result.Value?.Count : 0;

            cartCount = count > 0 ? count : 0;
        } catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart: {ex.Message}");
            return;
        }
        
    }


    // protected async override void OnInitialized()
    // {

        
    //     cartCount = shoppingCart.LineItems.Count();
    //     shoppingCart.OnChange += StateHasChanged;
    //     await GetProductCount();
    //     _cartService.OnChange += StateHasChanged;
    // }

    // protected async void OnAfterRenderAsync()
    // {
    //     await GetProductCount();
    // }

    // protected async Task OnInitializedAsync()
    // {
    //     //await GetProductCount();
    //     var cart = await localStorage.GetItemAsync<List<Product>>("cart");

    //     //var cart = await _protectedLocalStorage.GetAsync<List<Product>>("cart");

    //     cartCount = cart != null ? cartCount : 0;

    //     //return cart.Value.Count();
    // }

    // public void Dispose()
    // {
    //     _cartService.OnChange -= StateHasChanged;
    // }

    // protected override async Task After()
    // {

    //     var cart = localStorage.GetItem<List<Product>>("cart");

    //     cartCount = cart != null ? cartCount : 0;

    //     Console.WriteLine("Cart Count:" + cart.Count);



    // }

    // private async Task<int> GetProductCount()
    // {

    //     //var cart = await localStorage.GetItemAsync<List<Product>>("cart");

    //     var cart = await _protectedLocalStorage.GetAsync<List<Product>>("cart");

    //     cartCount = cart.Value != null ? cart.Value.Count() : 0;

    //     return cartCount;

    //     //return cart.Value != null ? cart.Value.Count() : 0;

        
    // }



    //@ using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage 
    //@rendermode InteractiveServer
}
