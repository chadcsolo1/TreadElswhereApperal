@page "/productsdisplay"
@using Blazored.Toast.Services
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<EcommerceDbContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject IToastService toastService


@* <_TopMenu></_TopMenu> *@

<h3>ProductsDisplay</h3>
<div class="grid-container">
    @foreach (var product in listOfProducts)
    {
        <_ProductCard Product="product" OnAddToCart="AddProductToCart"/>
    }
</div>

@* <ShoppingCart Products="cartProducts"/> *@

<Offcanvas @ref="ShoppingCart" Title="ShoppingCart" Placement="Placement.End">
    <BodyTemplate>
        <div>
            <h2>Select Products</h2>
            <hr />
            @if (order is null)
            {
                <p><em>Loading...</em></p>
            } else
            {
                @foreach (var orderDetail in listOrderDetails)
                {
                    <div class="card-container" style="margin-top: 5px;">
                        <div class="card" style="display: flex; flex-direction: row; justify-content: space-between; align-content: stretch;">
                            <div class="row" style="margin-right: 0px;">
                                <div class="col">
                                    <img src="@orderDetail.Product.Img" alt="Product Image" style="height: 150px; width: 250px" class="img-fluid" />
                                </div>
                                <div class="col" style="text-align: center;">
                                    <h5 style="font-size: 16px; font-weight: bold">@orderDetail.Product.Name</h5>
                                    <p style="font-size: 11px;">Color: @orderDetail.Product.Colors</p>
                                    <p style="font-size: 11px;">Size: @orderDetail.Product.Sizes</p>
                                    <InputNumber type="number" @oninput="() => UpdateSubtotal(orderDetail)" @bind-Value="orderQuantity" style="width: 60px;">@orderQuantity</InputNumber>
                                </div>
                                <div class="col" style="display: flex; flex-direction: column; justify-content: space-between; width: auto; padding-left: 10px;">
                                    <Button @onclick="() => RemoveProductFromCart(orderDetail)" Style="background-color: none; margin-right: 0px; padding-right: 0px; text-align: right;">
                                        <Icon Name="IconName.Trash"></Icon>
                                    </Button>
                                    <p  style="font-size: 15px; margin-right: 0px; padding-right: 0px; text-align: right;">$ @orderDetail.Subtotal</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <p>Quantity : @orderDetail.Quantity</p>
                    <p>PricePerUnit : @orderDetail.PricePerUnit</p>
                    <p>Subtotal : @orderDetail.Subtotal</p>
                }
                <div>
                    <hr/>
                    <h5 style="font-size: 16px; font-weight: bold">Total: $ @order.Subtotal</h5>
                    <Button Color="ButtonColor.Primary" Type="ButtonType.Link" style="align-content: stretch">
                        CHECKOUT
                    </Button>
                </div>
            }
        </div>
    </BodyTemplate>
</Offcanvas>



@code {
    private EcommerceDbContext _dbContext = default!;
    List<Product> listOfProducts = new();
    //public List<Product> cartProducts = new();
    public List<OrderDetail> listOrderDetails = new();
    public Order order = new();
    Product testProduct = new();
    int orderQuantity = 0;
    private Offcanvas ShoppingCart = default!;

    protected override async Task OnInitializedAsync()
    {
        _dbContext = DbContextFactory.CreateDbContext();
        listOfProducts = await _dbContext.Products.ToListAsync();
        testProduct = listOfProducts.FirstOrDefault();
    }

    protected async Task AddProductToCart(Product product)
    {
        orderQuantity = 1;
        OrderDetail orderDetails = new()
        {
            ProductId = product.Id,
            Product = product,
            Quantity = orderQuantity,
            PricePerUnit = (decimal)product.Price,
            Subtotal = (orderQuantity * (decimal)product.Price)
        };
        listOrderDetails.Add(orderDetails);
        // order.CustomerId = 1;
        // order.PricePerUnit = (decimal)product.Price;
        // order.Quantity = 1;
        // order.Subtotal = ((decimal)product.Price * order.Quantity);
        // order.OrderDetails.Add(new OrderDetail
        // {
        //         ProductId = product.Id,
        //         Product = product,
        //         Quantity = order.Quantity,
        //         PricePerUnit = (decimal)product.Price,
        //         Subtotal = (order.PricePerUnit * order.Quantity)

        // });

        var cart = await localStorage.GetItemAsync<List<Product>>("cart");
        if (cart == null)
        {
            cart = new List<Product>();
        }

        cart.Add(product);
        await localStorage.SetItemAsync("cart", cart);
        toastService.ShowSuccess(product.Name + "Added to Cart:");

        var cartTwo = await localStorage.GetItemAsync<List<OrderDetail>>("cart");
        var cartThree = await localStorage.GetItemAsync<List<Product>>("cart");


        await ShoppingCart.ShowAsync();
    }

    protected async Task RemoveProductFromCart(OrderDetail orderDetail)
    {
        //order.OrderDetails.Remove(order.OrderDetails.FirstOrDefault(x => x.Product == product));
        listOrderDetails.Remove(orderDetail);
    }

    protected async Task UpdateSubtotal(OrderDetail orderDetail)
    {
        orderDetail.Subtotal = (orderDetail.PricePerUnit * orderQuantity);
        
    }
}
