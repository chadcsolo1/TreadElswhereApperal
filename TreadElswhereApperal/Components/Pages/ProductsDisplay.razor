@page "/productsdisplay"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<EcommerceDbContext> DbContextFactory
@inject NavigationManager NavigationManager


<h3>ProductsDisplay</h3>
<div class="grid-container">
    @foreach (var product in listOfProducts)
    {
        <_ProductCard Product="product" OnAddToCart="AddProductToCart"/>
    }
</div>

@* <ShoppingCart Products="cartProducts"/> *@

<Offcanvas @ref="ShoppingCart" Title="ShoppingCart" Placement="Placement.End">
    <BodyTemplate>
        <div>
            <h2>Select Products</h2>
            <hr />
            @if (order is null)
            {
                <p><em>Loading...</em></p>
            } else
            {
                @foreach (var order in order.OrderDetails)
                {
                    <div class="card-container" style="margin-top: 5px;">
                        <div class="card" style="display: flex; flex-direction: row; justify-content: space-between; align-content: stretch;">
                            <div class="row" style="margin-right: 0px;">
                                <div class="col">
                                    <img src="@order.Product.Img" alt="Product Image" style="height: 150px; width: 250px" class="img-fluid" />
                                </div>
                                <div class="col" style="text-align: center;">
                                    <h5 style="font-size: 16px; font-weight: bold">@order.Product.Name</h5>
                                    <p style="font-size: 11px;">Color: @order.Product.Colors</p>
                                    <p style="font-size: 11px;">Size: @order.Product.Sizes</p>
                                    <InputNumber type="number" @bind-Value="order.Quantity" style="width: 60px;"></InputNumber>
                                </div>
                                <div class="col" style="display: flex; flex-direction: column; justify-content: space-between; width: auto; padding-left: 10px;">
                                    <Button @onclick="() => RemoveProductFromCart(order.Product)" Style="background-color: none; margin-right: 0px; padding-right: 0px; text-align: right;">
                                        <Icon Name="IconName.Trash"></Icon>
                                    </Button>
                                    <p @bind-Value="@order.Quantity" @bind-Value:event="oninput" style="font-size: 15px; margin-right: 0px; padding-right: 0px; text-align: right;">$ @order.Subtotal</p>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                <div>
                    <hr/>
                    <h5 style="font-size: 16px; font-weight: bold">Total: $ @order.Subtotal</h5>
                    <Button Color="ButtonColor.Primary" Type="ButtonType.Link" style="align-content: stretch">
                         CHECKOUT
                    </Button>
                </div>
            }
        </div>
    </BodyTemplate>
</Offcanvas>



@code {
    private EcommerceDbContext _dbContext = default!;
    List<Product> listOfProducts = new();
    //public List<Product> cartProducts = new();
    public Order order = new();
    Product testProduct = new();
    private Offcanvas ShoppingCart = default!;

    protected override async Task OnInitializedAsync()
    {
        _dbContext = DbContextFactory.CreateDbContext();
        listOfProducts = await _dbContext.Products.ToListAsync();
        testProduct = listOfProducts.FirstOrDefault();
    }

    protected async Task AddProductToCart(Product product)
    {
        order.CustomerId = 1;
        order.PricePerUnit = (decimal)product.Price;
        order.Quantity = 1;
        order.Subtotal = ((decimal)product.Price * order.Quantity);
        order.OrderDetails.Add(new OrderDetail
        {
                ProductId = product.Id,
                Product = product,
                Quantity = 1,
                PricePerUnit = (decimal)product.Price,
                Subtotal = ((decimal)product.Price * order.Quantity)

        });



        await ShoppingCart.ShowAsync();
    }

    protected async Task RemoveProductFromCart(Product product)
    {
        order.OrderDetails.Remove(order.OrderDetails.FirstOrDefault(x => x.Product == product));
    }
}
