@page "/productsdisplay"
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<EcommerceDbContext> DbContextFactory
@inject NavigationManager NavigationManager


<h3>ProductsDisplay</h3>
<div class="grid-container">
    @foreach (var product in listOfProducts)
    {
        <_ProductCard Product="product" OnAddToCart="AddProductToCart"/>
    }
</div>

@* <ShoppingCart Products="cartProducts"/> *@

<Offcanvas @ref="ShoppingCart" Title="ShoppingCart" Placement="Placement.End">
    <BodyTemplate>
        <div>
            <h2>Select Products</h2>
            <hr />
            @if (cartProducts is null)
            {
                <p><em>Loading...</em></p>
            } else
            {
                @foreach (var prod in cartProducts)
                {
                    <div class="card-container" >
                        <div class="card" style="width: 100px" >
                            <img src="@prod.Img" alt="Product Image" style="height: 100px" class="img-fluid" />
                            <h5>@prod.Name</h5>
                            <p>@prod.ProductDescription</p>
                            <p>Price: @prod.Price</p>
                            <Button @onclick="() => RemoveProductFromCart(prod)" Color="ButtonColor.Danger" >Remove</Button>
                        </div>
                    </div>
                }
            }
        </div>
    </BodyTemplate>
</Offcanvas>



@code {
    private EcommerceDbContext _dbContext = default!;
    List<Product> listOfProducts = new();
    public List<Product> cartProducts = new();
    Product testProduct = new();
    private Offcanvas ShoppingCart = default!;

    protected override async Task OnInitializedAsync()
    {
        _dbContext = DbContextFactory.CreateDbContext();
        listOfProducts = await _dbContext.Products.ToListAsync();
        testProduct = listOfProducts.FirstOrDefault();
    }

    protected async Task AddProductToCart(Product product)
    {
        cartProducts.Add(product);

        await ShoppingCart.ShowAsync();
    }

    protected async Task RemoveProductFromCart(Product product)
    {
        cartProducts.Remove(product);
    }
}
