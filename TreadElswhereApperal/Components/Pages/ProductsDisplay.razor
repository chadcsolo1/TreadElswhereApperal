@page "/productsdisplay"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Text.Json
@inject IProductsService productService
@* @inject IDbContextFactory<EcommerceDbContext> DbContextFactory *@
@inject ProtectedLocalStorage _protectedLocalStorage
@inject NavigationManager NavigationManager
@inject IToastService toastService
@inject ICartService _cartService



@* <_TopMenu></_TopMenu> *@

<h3>ProductsDisplay</h3>
<div class="grid-container">
    @foreach (var product in listOfProducts)
    {
        <_ProductCard Product="product" OnAddToCart="AddProductToCart"/>
    }
</div>

@* <ShoppingCart Products="cartProducts"/> *@





@code {
    //private EcommerceDbContext _dbContext = default!;
    List<Product> listOfProducts = new();
    //public List<Product> cartProducts = new();
    public List<OrderDetail> listOrderDetails = new();
    public Order order = new();
    Product testProduct = new();
    int orderQuantity = 0;
    private Offcanvas ShoppingCart = default!;

    protected override async Task OnInitializedAsync()
    {
        // _dbContext = DbContextFactory.CreateDbContext();
        // listOfProducts = await _dbContext.Products.ToListAsync();
        // testProduct = listOfProducts.FirstOrDefault();

        listOfProducts = await productService.GetProducts();
    }

    protected async Task AddProductToCart(Product product)
    {
        orderQuantity = 1;
        OrderDetail orderDetails = new()
        {
            ProductId = product.Id,
            Product = product,
            Quantity = orderQuantity,
            PricePerUnit = (decimal)product.Price,
            Subtotal = (orderQuantity * (decimal)product.Price)
        };
        listOrderDetails.Add(orderDetails);
        // order.CustomerId = 1;
        // order.PricePerUnit = (decimal)product.Price;
        // order.Quantity = 1;
        // order.Subtotal = ((decimal)product.Price * order.Quantity);
        // order.OrderDetails.Add(new OrderDetail
        // {
        //         ProductId = product.Id,
        //         Product = product,
        //         Quantity = order.Quantity,
        //         PricePerUnit = (decimal)product.Price,
        //         Subtotal = (order.PricePerUnit * order.Quantity)

        // });


        //await AddToCart(product);

        await _cartService.AddToCart(product);


        await ShoppingCart.ShowAsync();
    }

    // private async Task AddToCart(Product product)
    // {
    //     var result = await _protectedLocalStorage.GetAsync<object>("cart1");

    //     if (result.Success)
    //     {
    //         Deserialize the existing cart if it exists
    //         var existingCart = JsonSerializer.Deserialize<List<Product>>(result.Value.ToString()) ?? new List<Product>();
    //         existingCart.Add(product);
    //         await _protectedLocalStorage.SetAsync("cart1", existingCart);
    //     } else
    //     {
    //         If no cart exists, create a new one with the product
    //         await _protectedLocalStorage.SetAsync("cart1", new List<Product> { product });
    //     }
    //     StateHasChanged();
    // }



    protected async Task UpdateSubtotal(OrderDetail orderDetail)
    {
        orderDetail.Subtotal = (orderDetail.PricePerUnit * orderQuantity);
        
    }
}
