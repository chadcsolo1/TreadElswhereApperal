@page "/customers/delete"
@using Microsoft.EntityFrameworkCore
@using TreadElswhereApperal.Models
@inject IDbContextFactory<TreadElswhereApperal.Models.EcommerceDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Customer</h2>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@customer.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@customer.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@customer.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Password</dt>
            <dd class="col-sm-10">@customer.Password</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Salt</dt>
            <dd class="col-sm-10">@customer.Salt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@customer.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateOfBirth</dt>
            <dd class="col-sm-10">@customer.DateOfBirth</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AccountCreated</dt>
            <dd class="col-sm-10">@customer.AccountCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AccountUpdated</dt>
            <dd class="col-sm-10">@customer.AccountUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AccountStatus</dt>
            <dd class="col-sm-10">@customer.AccountStatus</dd>
        </dl>
        <EditForm method="post" Model="customer" OnValidSubmit="DeleteCustomer" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(customer is null)">Delete</button> |
            <a href="/customers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Customer? customer;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        customer = await context.Customers.FirstOrDefaultAsync(m => m.Id == Id);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Customers.Remove(customer!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/customers");
    }
}
